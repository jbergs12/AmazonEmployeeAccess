
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(tidymodels)
── Attaching packages ────────────────────────────────────── tidymodels 1.2.0 ──
✔ broom        1.0.7     ✔ recipes      1.1.0
✔ dials        1.3.0     ✔ rsample      1.2.1
✔ dplyr        1.1.4     ✔ tibble       3.2.1
✔ ggplot2      3.5.1     ✔ tidyr        1.3.1
✔ infer        1.0.7     ✔ tune         1.2.1
✔ modeldata    1.4.0     ✔ workflows    1.1.4
✔ parsnip      1.2.1     ✔ workflowsets 1.1.0
✔ purrr        1.0.2     ✔ yardstick    1.3.1
── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──
✖ purrr::discard() masks scales::discard()
✖ dplyr::filter()  masks stats::filter()
✖ dplyr::lag()     masks stats::lag()
✖ recipes::step()  masks stats::step()
• Use tidymodels_prefer() to resolve common conflicts.
> library(tidyverse)
── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.5
✔ lubridate 1.9.3     ✔ stringr   1.5.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ readr::col_factor() masks scales::col_factor()
✖ purrr::discard()    masks scales::discard()
✖ dplyr::filter()     masks stats::filter()
✖ stringr::fixed()    masks recipes::fixed()
✖ dplyr::lag()        masks stats::lag()
✖ readr::spec()       masks yardstick::spec()
ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors
> library(vroom)

Attaching package: ‘vroom’

The following objects are masked from ‘package:readr’:

    as.col_spec, col_character, col_date, col_datetime, col_double,
    col_factor, col_guess, col_integer, col_logical, col_number,
    col_skip, col_time, cols, cols_condense, cols_only, date_names,
    date_names_lang, date_names_langs, default_locale, fwf_cols,
    fwf_empty, fwf_positions, fwf_widths, locale, output_column,
    problems, spec

The following object is masked from ‘package:yardstick’:

    spec

The following object is masked from ‘package:scales’:

    col_factor

> library(glmnet)
Loading required package: Matrix

Attaching package: ‘Matrix’

The following objects are masked from ‘package:tidyr’:

    expand, pack, unpack

Loaded glmnet 4.1-8
> library(embed)
> library(lme4)
> 
> source("amz_recipe.R")
> 
> amz_train <- vroom("train.csv")
Rows: 32769 Columns: 10
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
dbl (10): ACTION, RESOURCE, MGR_ID, ROLE_ROLLUP_1, ROLE_ROLLUP_2, ROLE_DEPTN...

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> amz_train$ACTION <- as.factor(amz_train$ACTION)
> amz_test <- vroom("test.csv")
Rows: 58921 Columns: 10
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
dbl (10): id, RESOURCE, MGR_ID, ROLE_ROLLUP_1, ROLE_ROLLUP_2, ROLE_DEPTNAME,...

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> 
> amz_rec <- amz_recipe(amz_train)
> 
> # Logistic Regression
> 
> amz_logreg <- logistic_reg() |> 
+   set_engine("glm")
> 
> logreg_wf <- workflow() |> 
+   add_model(amz_logreg) |> 
+   add_recipe(amz_rec) |> 
+   fit(data=amz_train)
> 
> logreg_preds <- logreg_wf |>
+   predict(new_data = amz_test,
+           type="prob")
> 
> kaggle_submission1 <- logreg_preds |> 
+   bind_cols(amz_test) |> 
+   select(id, .pred_1) |> 
+   rename(Id = id,
+          ACTION=.pred_1)
> 
> # Penalized Logistic Regression
> 
> amz_plogreg <-logistic_reg(penalty = tune(),
+                            mixture = tune()) |> 
+   set_engine("glmnet")
> 
> plog_grid <- grid_regular(
+   penalty(),
+   mixture(),
+   levels = 6
+ )
> 
> folds <- vfold_cv(amz_train, v = 10, repeats = 1)
> 
> plogreg_wf <- workflow() |> 
+   add_model(amz_plogreg) |> 
+   add_recipe(amz_rec)
> 
> CV_results <- run_cv(plogreg_wf, folds, plog_grid, metric = metric_set(roc_auc),
+                      cores = 6)
Loading required package: foreach

Attaching package: ‘foreach’

The following objects are masked from ‘package:purrr’:

    accumulate, when

Loading required package: iterators
Loading required package: parallel
> 
> bestTune <- CV_results |> 
+   select_best(metric = "roc_auc")
> 
> bestTune$penalty
[1] 1
> bestTune$mixture
[1] 0
> 
> final_wf <- plogreg_wf |> 
+   finalize_workflow(bestTune) |> 
+   fit(data=amz_train)
> 
> plogreg_preds <- final_wf |> 
+   predict(new_data = amz_test,
+           type = "prob")
> 
> kaggle_submission2 <- plogreg_preds |> 
+   bind_cols(amz_test) |> 
+   select(id, .pred_1) |> 
+   rename(Id = id,
+          ACTION = .pred_1)
> 
> vroom_write(x=kaggle_submission1, file="./logreg2.csv", delim = ",")
> vroom_write(x=kaggle_submission2, file="./plogreg2.csv", delim = ",")
> 
> proc.time()
   user  system elapsed 
 51.999   1.408 116.982 
